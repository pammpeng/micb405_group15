> STAR Genome Index 
STAR --runMode genomeGenerate --runThreadN 8 --genomeDir /Volumes/Angies_SSD/MICB_405/genome_index --genomeFastaFiles /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_1.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_2.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_3.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_4.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_5.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_X.fasta /users/angie/downloads/ncbi_dataset_2/c_elegans_chromosome_MT.fasta --sjdbGTFfile /users/angie/downloads/ncbi_dataset_2/genomic.gtf --sjdbOverhang 49 --genomeSAsparseD 2 --genomeSAindexNbases 13 --limitGenomeGenerateRAM 14000000000

> STAR Alignment 
STAR --genomeDir ../../genome_index_27/ --readFilesIn [SRR...].fastq.gz [SRR...].fastq.gz --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode GeneCounts --runThreadN 8 --alignIntronMax 10000 --outFilterMatchNmin 18 --limitBAMsortRAM 14000000000 &

> wget to obtain datasets from the European Nucleotide Archive (ENA) Database
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR202/014/SRR20206814/[SRR...].fastq.gz &
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR202/014/SRR20206814/[SRR...].fastq.gz &

DESEQ R CODE:
Comparison 1: Transgenerational Comparison
```{r Metadata table generation}
# Define metadata information
transgenerational_sample_ids <- c("F1_1", "F1_2", "F1_3", "F1_4", "F1_5", "F3_1", "F3_2", "P0_1", "P0_2", "P0_3")
transgenerational_condition <- c("F1", "F1", "F1", "F1", "F1", "F3", "F3", "P0", "P0", "P0")
transgenerational_replicate <- c(1, 2, 3, 4, 5, 1, 2, 1, 2, 3)
# Create metadata data frame
transgenerational_metadata_df <- data.frame(SampleID = transgenerational_sample_ids, Condition = transgenerational_condition, Replicate = transgenerational_replicate)
```
```{r Differential gene expression analysis in DESeq2}
# Import count matrix file
transgenerational_count_matrix <- read.table("/volumes/Angies_SSD/MICB_405/read_alignments/transgenerational_final_count_matrix.txt", header = TRUE, row.names = 1, sep = "\t")
# Specify P0 as the reference level for the "Condition" variable & design formula
transgenerational_metadata_df$Condition <- as.factor(transgenerational_metadata_df$Condition)
transgenerational_metadata_df$Condition <- relevel(transgenerational_metadata_df$Condition, ref = "P0")
design <- ~ Condition
# Build dataset object and complete DEG analysis
transgenerational_dds <- DESeqDataSetFromMatrix(countData = transgenerational_count_matrix, colData = transgenerational_metadata_df, design = design)
transgenerational_DESeq <- DESeq(transgenerational_dds)
# Extract results and statistically significant DEGs
transgenerational_DESeq_results <- results(transgenerational_DESeq)
transgenerational_DESeq_results <- as.data.frame(transgenerational_DESeq_results)
transgenerational_DESeq_results <- transgenerational_DESeq_results[!is.na(transgenerational_DESeq_results$padj), ]
write.csv(transgenerational_DESeq_results, file = "/Volumes/Angies_SSD/MICB_405/transgenerational_DESeq2_results.csv", row.names = FALSE)
```
Visualization of Differential Gene Expression Analysis
```{r PCA plot - clustering of samples based on similarity in differentially expressed genes}
# Perform variance stabilizing transformation (VST) on dds
transgenerational_dds <- vst(transgenerational_dds)
# Perform principal component analysis (PCA) and convert results into a data frame
transgenerational_pca <- prcomp(t(assay(transgenerational_dds)))
transgenerational_pca_df <- as.data.frame(transgenerational_pca$x)
  # Define condition colours for subsequent PCA plot
  transgenerational_pca_df$Condition <- factor(transgenerational_metadata_df$Condition)
# Create PCA plot with ggofortify package
transgenerational_pca_plot <- autoplot(transgenerational_pca, data = transgenerational_pca_df) + geom_point(aes(color = Condition), size = 4) + geom_text(aes(label = transgenerational_sample_ids), vjust = 1.5, hjust = 0, size = 2.5) + labs(color = "Condition") + theme(panel.grid = element_blank(), panel.background = element_rect(fill = "white"), axis.line = element_line(color = "black"),axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14)) 
print(transgenerational_pca_plot)
# Save the PCA plot to a file
ggsave("/Volumes/Angies_SSD/MICB_405/transgenerational_PCA_plot.png", plot = transgenerational_pca_plot, width = 6, height = 4, dpi = 500)
```
```{r Heatmap - similarity in gene expression}
# Subset count matrix to include only differentially expressed genes
transgenerational_significant_DEGs <- rownames(transgenerational_DESeq_results)[which(transgenerational_DESeq_results$padj < 0.05)]  
transgenerational_statistically_significant_count_matrix <- transgenerational_count_matrix[transgenerational_significant_DEGs, ]
# Calculate z-scores
transgenerational_z_scores <- t(scale(t(transgenerational_statistically_significant_count_matrix)))
# Create heatmap plot using Pheatmap package
transgenerational_heatmap <- pheatmap(transgenerational_z_scores, cluster_rows = TRUE, cluster_cols = FALSE, scale = "none", main = "Heatmap of Differentially Expressed Genes", fontsize = 8, show_row_dendrogram = FALSE, show_col_dendrogram = FALSE)
print(transgenerational_heatmap)
  # check code for show_row_dendrogram = FALSE, show_col_dendrogram = FALSE
# Save the heatmap plot into a file
ggsave("/Volumes/Angies_SSD/MICB_405/transgenerational_heatmap.png", transgenerational_heatmap, width = 10, height = 7, dpi = 500)
```
